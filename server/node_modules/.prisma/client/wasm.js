
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.11.0
 * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
 */
Prisma.prismaVersion = {
  client: "5.11.0",
  engine: "efd2449663b3d73d637ea1fd226bafbcf45b3102"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.VmwareScalarFieldEnum = {
  cve: 'cve',
  synopsis: 'synopsis',
  severity: 'severity',
  date: 'date',
  link: 'link',
  detail: 'detail'
};

exports.Prisma.CiscoScalarFieldEnum = {
  id: 'id',
  link: 'link',
  title: 'title',
  impact: 'impact',
  version: 'version',
  last_updated: 'last_updated',
  clean_cves: 'clean_cves'
};

exports.Prisma.OracleScalarFieldEnum = {
  id: 'id',
  affected_product: 'affected_product',
  affected_product_link: 'affected_product_link',
  patch_document: 'patch_document',
  patch_document_link: 'patch_document_link'
};

exports.Prisma.MicrosoftScalarFieldEnum = {
  cve: 'cve',
  release_date: 'release_date',
  revision_date: 'revision_date',
  cve_link: 'cve_link',
  cve_title: 'cve_title',
  impact: 'impact',
  severity: 'severity',
  tag: 'tag'
};

exports.Prisma.HackernewsScalarFieldEnum = {
  title: 'title',
  link: 'link',
  img: 'img',
  date: 'date',
  description: 'description',
  detail: 'detail'
};

exports.Prisma.RedhatScalarFieldEnum = {
  id: 'id',
  RHSA: 'RHSA',
  severity: 'severity',
  released_on: 'released_on',
  CVEs: 'CVEs',
  bugzillas: 'bugzillas',
  released_packages: 'released_packages',
  resource_url: 'resource_url'
};

exports.Prisma.Redhat_DocumentScalarFieldEnum = {
  id: 'id',
  category: 'category',
  csaf_version: 'csaf_version',
  lang: 'lang',
  title: 'title',
  redhatId: 'redhatId',
  aggregateSeverityId: 'aggregateSeverityId',
  distributionId: 'distributionId',
  publisherId: 'publisherId'
};

exports.Prisma.Redhat_TrackingScalarFieldEnum = {
  id: 'id',
  current_release_date: 'current_release_date',
  ID: 'ID',
  documentId: 'documentId'
};

exports.Prisma.Redhat_AggregateSeverityScalarFieldEnum = {
  id: 'id',
  namespace: 'namespace',
  text: 'text',
  documentId: 'documentId'
};

exports.Prisma.Redhat_DistributionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  documentId: 'documentId',
  tlpId: 'tlpId'
};

exports.Prisma.Redhat_TlpScalarFieldEnum = {
  id: 'id',
  label: 'label',
  url: 'url',
  distributionId: 'distributionId'
};

exports.Prisma.Redhat_Document_NoteScalarFieldEnum = {
  id: 'id',
  category: 'category',
  text: 'text',
  title: 'title',
  documentId: 'documentId'
};

exports.Prisma.Redhat_PublisherScalarFieldEnum = {
  id: 'id',
  category: 'category',
  contact_details: 'contact_details',
  issuing_authority: 'issuing_authority',
  name: 'name',
  namespace: 'namespace',
  documentId: 'documentId'
};

exports.Prisma.Redhat_Document_ReferenceScalarFieldEnum = {
  id: 'id',
  category: 'category',
  summary: 'summary',
  url: 'url',
  documentId: 'documentId'
};

exports.Prisma.Redhat_VulnerabilityScalarFieldEnum = {
  id: 'id',
  cve: 'cve',
  discovery_date: 'discovery_date',
  release_date: 'release_date',
  title: 'title',
  redhatId: 'redhatId'
};

exports.Prisma.Redhat_Vulnerability_IdScalarFieldEnum = {
  id: 'id',
  system_name: 'system_name',
  text: 'text',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_NoteScalarFieldEnum = {
  id: 'id',
  category: 'category',
  text: 'text',
  title: 'title',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_ProductStatusScalarFieldEnum = {
  id: 'id',
  fixed: 'fixed',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_ReferenceScalarFieldEnum = {
  id: 'id',
  category: 'category',
  summary: 'summary',
  url: 'url',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_RemediationScalarFieldEnum = {
  id: 'id',
  category: 'category',
  details: 'details',
  product_ids: 'product_ids',
  url: 'url',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_RestartRequiredScalarFieldEnum = {
  id: 'id',
  category: 'category',
  remediationId: 'remediationId'
};

exports.Prisma.Redhat_Vulnerability_ScoreScalarFieldEnum = {
  id: 'id',
  products: 'products',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_CvssV3ScalarFieldEnum = {
  id: 'id',
  attackComplexity: 'attackComplexity',
  attackVector: 'attackVector',
  availabilityImpact: 'availabilityImpact',
  baseScore: 'baseScore',
  baseSeverity: 'baseSeverity',
  confidentialityImpact: 'confidentialityImpact',
  integrityImpact: 'integrityImpact',
  privilegesRequired: 'privilegesRequired',
  scope: 'scope',
  userInteraction: 'userInteraction',
  vectorString: 'vectorString',
  version: 'version',
  scoreId: 'scoreId'
};

exports.Prisma.Redhat_Vulnerability_ThreatScalarFieldEnum = {
  id: 'id',
  category: 'category',
  details: 'details',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.Redhat_Vulnerability_CweScalarFieldEnum = {
  id: 'id',
  cweId: 'cweId',
  name: 'name',
  vulnerabilityId: 'vulnerabilityId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  vmware: 'vmware',
  cisco: 'cisco',
  oracle: 'oracle',
  microsoft: 'microsoft',
  hackernews: 'hackernews',
  Redhat: 'Redhat',
  Redhat_Document: 'Redhat_Document',
  Redhat_Tracking: 'Redhat_Tracking',
  Redhat_AggregateSeverity: 'Redhat_AggregateSeverity',
  Redhat_Distribution: 'Redhat_Distribution',
  Redhat_Tlp: 'Redhat_Tlp',
  Redhat_Document_Note: 'Redhat_Document_Note',
  Redhat_Publisher: 'Redhat_Publisher',
  Redhat_Document_Reference: 'Redhat_Document_Reference',
  Redhat_Vulnerability: 'Redhat_Vulnerability',
  Redhat_Vulnerability_Id: 'Redhat_Vulnerability_Id',
  Redhat_Vulnerability_Note: 'Redhat_Vulnerability_Note',
  Redhat_Vulnerability_ProductStatus: 'Redhat_Vulnerability_ProductStatus',
  Redhat_Vulnerability_Reference: 'Redhat_Vulnerability_Reference',
  Redhat_Vulnerability_Remediation: 'Redhat_Vulnerability_Remediation',
  Redhat_Vulnerability_RestartRequired: 'Redhat_Vulnerability_RestartRequired',
  Redhat_Vulnerability_Score: 'Redhat_Vulnerability_Score',
  Redhat_Vulnerability_CvssV3: 'Redhat_Vulnerability_CvssV3',
  Redhat_Vulnerability_Threat: 'Redhat_Vulnerability_Threat',
  Redhat_Vulnerability_Cwe: 'Redhat_Vulnerability_Cwe'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
